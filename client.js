// Generated by CoffeeScript 1.6.3
(function() {
  var getDiceScore, players, ractive, socket, updateDice;

  players = [];

  ractive = new Ractive({
    el: 'container',
    template: '#template',
    data: {
      myId: null,
      myName: null,
      state: 'waiting',
      role: null,
      myTurn: false,
      dice: [
        {
          n: 6,
          s: false
        }, {
          n: 6,
          s: false
        }, {
          n: 6,
          s: false
        }, {
          n: 6,
          s: false
        }, {
          n: 6,
          s: false
        }, {
          n: 6,
          s: false
        }
      ],
      diceValue: 0,
      oldValue: 0,
      turnValue: 0,
      players: players,
      info: ''
    }
  });

  getDiceScore = function(str) {
    switch (str) {
      case '5':
        return 50;
      case '1':
      case '55':
        return 100;
      case '15':
        return 150;
      case '222':
      case '11':
      case '155':
        return 200;
      case '115':
      case '2225':
        return 250;
      case '333':
      case '1155':
      case '1222':
      case '22255':
        return 300;
      case '3335':
      case '12225':
        return 350;
      case '444':
      case '11222':
      case '122255':
      case '1333':
      case '33355':
        return 400;
      case '112225':
      case '13335':
      case '4445':
        return 450;
      case '111':
      case '555':
      case '11333':
      case '133355':
      case '1444':
      case '44455':
        return 500;
      case '1133355':
      case '14445':
      case '1115':
        return 550;
      case '666':
      case '11444':
      case '144455':
      case '1555':
      case '11155':
        return 600;
      case '114445':
      case '5666':
        return 650;
      case '1666':
      case '55666':
        return 700;
      case '15666':
        return 750;
      case '11666':
        return 800;
      case '115666':
        return 850;
      case '1111':
      case '2222':
      case '3333':
      case '4444':
      case '5555':
      case '6666':
        return 1000;
      case '11115':
      case '22225':
      case '33335':
      case '44445':
      case '56666':
        return 1050;
      case '12222':
      case '13333':
      case '14444':
      case '15555':
      case '16666':
        return 1100;
      case '122225':
      case '133335':
      case '144445':
      case '156666':
        return 1150;
      case '123456':
      case '111222':
      case '111333':
      case '111444':
      case '111555':
      case '111666':
      case '222333':
      case '222444':
      case '222555':
      case '222666':
      case '333444':
      case '333555':
      case '333666':
      case '444555':
      case '444666':
      case '555666':
      case '111122':
      case '111133':
      case '111144':
      case '111155':
      case '111166':
      case '112222':
      case '112233':
      case '112244':
      case '112255':
      case '112266':
      case '113333':
      case '113344':
      case '113355':
      case '113366':
      case '114444':
      case '114455':
      case '114466':
      case '115566':
      case '116666':
      case '222233':
      case '222244':
      case '222255':
      case '222266':
      case '222233':
      case '223344':
      case '223355':
      case '223366':
      case '224444':
      case '224455':
      case '224466':
      case '225555':
      case '225566':
      case '226666':
      case '333344':
      case '333355':
      case '333366':
      case '334444':
      case '334455':
      case '334466':
      case '335555':
      case '335566':
      case '336666':
      case '444455':
      case '444466':
      case '445555':
      case '445566':
      case '446666':
        return 1500;
      case '11111':
      case '22222':
      case '33333':
      case '44444':
      case '55555':
      case '66666':
        return 2000;
      case '111115':
      case '222225':
      case '333335':
      case '444445':
      case '555556':
        return 2050;
      case '122222':
      case '133333':
      case '144444':
      case '155555':
      case '166666':
        return 2100;
      case '111111':
      case '222222':
      case '333333':
      case '444444':
      case '555555':
      case '666666':
        return 3000;
      default:
        return 0;
    }
  };

  updateDice = function() {
    var d, d2;
    d = ractive.get('dice').filter(function(el) {
      return el.s;
    });
    d.sort(function(a, b) {
      return a.n - b.n;
    });
    d2 = getDiceScore(d.map(function(el) {
      return el.n;
    }).join(''));
    ractive.set('diceValue', d2);
    return ractive.set('turnValue', d2 + ractive.get('oldValue'));
  };

  socket = io.connect();

  socket.on('connect', function() {
    return ractive.set('state', 'entry');
  });

  socket.on('unavailable', function(data) {
    var p, _i, _len, _ref;
    ractive.set('myId', data.id.slice(0, 6));
    ractive.set('myName', data.name);
    _ref = data.players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      players.push({
        id: p.id,
        name: p.name,
        score: p.score
      });
    }
    ractive.set('role', 'spectator');
    return ractive.set('state', 'game');
  });

  socket.on('joined', function(data) {
    var p, _i, _len, _ref;
    console.log('joined!');
    ractive.set('myId', data.id.slice(0, 6));
    ractive.set('myName', data.name);
    _ref = data.players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      players.push({
        id: p.id,
        name: p.name,
        score: p.score
      });
    }
    ractive.set('role', 'player');
    return ractive.set('state', 'foyer');
  });

  socket.on('newplayer', function(data) {
    return players.push({
      id: data.id,
      name: data.name,
      score: 0
    });
  });

  socket.on('started', function(data) {
    return ractive.set('state', 'game');
  });

  socket.on('yourturn', function(data) {
    console.log(data.dice);
    ractive.set('dice', data.dice.map(function(el) {
      return {
        n: el,
        s: false
      };
    }));
    return ractive.set('myTurn', true);
  });

  socket.on('continue', function(data) {
    console.log(data.dice);
    ractive.set('dice', data.dice.map(function(el) {
      return {
        n: el,
        s: false
      };
    }));
    ractive.set('oldValue', data.risk);
    return ractive.set('info', "Your score is " + data.score + ", of which you are risking " + data.risk);
  });

  socket.on('farkle', function() {
    ractive.set('info', "You farkled!");
    return ractive.set('myTurn', false);
  });

  socket.on('turnover', function(data) {
    ractive.set('oldValue', 0);
    ractive.set('turnValue', 0);
    ractive.set('diceValue', 0);
    ractive.set('info', "Your turn ended successfully.");
    return ractive.set('myTurn', false);
  });

  socket.on('cheat', function(data) {
    return ractive.set('info', "" + data.name + "&nbsp;<code class='id'>" + (data.id.slice(0, 6)) + "</code> cheated?");
  });

  socket.on('update', function(data) {
    var p, _i, _j, _len, _len1, _ref;
    for (_i = 0, _len = players.length; _i < _len; _i++) {
      p = players[_i];
      players.pop();
    }
    _ref = data.players;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      p = _ref[_j];
      players.push({
        id: p.id,
        name: p.name,
        score: p.score
      });
    }
    ractive.set('dice', data.dice.map(function(el) {
      return {
        n: el,
        s: false
      };
    }));
    return ractive.set('info', data.info);
  });

  socket.on('gameover', function(data) {
    var p, _i, _j, _len, _len1, _ref;
    for (_i = 0, _len = players.length; _i < _len; _i++) {
      p = players[_i];
      players.pop();
    }
    _ref = data.leaders;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      p = _ref[_j];
      players.push({
        id: p.id,
        name: p.name,
        score: p.score
      });
    }
    return ractive.set('state', 'afterparty');
  });

  ractive.on({
    setname: function(e) {
      socket.emit('setname', e.node.value);
      return ractive.set('state', 'waiting');
    },
    startgame: function(e) {
      console.log('starting');
      return socket.emit('startgame');
    },
    selectdie: function(e) {
      if (ractive.get('myTurn')) {
        ractive.set("dice[" + (e.node.getAttribute('data-i')) + "].s", !ractive.get("dice[" + (e.node.getAttribute('data-i')) + "].s"));
        return updateDice();
      }
    },
    submitdice: function(e) {
      return socket.emit('submitdice', {
        dice: ractive.get('dice')
      });
    },
    endturn: function(e) {
      return socket.emit('endturn', {
        dice: ractive.get('dice')
      });
    }
  });

}).call(this);
